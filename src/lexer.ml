# 1 "src/lexer.mll"
  
        open Parser        (* The type token is defined in parser.mli *)
(*		exception Eof
*)
 
# 8 "src/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\231\255\003\000\236\255\237\255\030\000\
    \239\255\240\255\241\255\242\255\243\255\014\000\048\000\075\000\
    \123\000\003\000\133\000\018\000\254\255\255\255\036\000\038\000\
    \001\000\253\255\245\255\002\000\252\255\244\255\095\000\247\255\
    \246\255\235\255\238\255\234\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\023\000\255\255\255\255\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\000\
    \006\000\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\017\000\255\255\024\000\000\000\000\000\027\000\027\000\
    \024\000\000\000\000\000\027\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\020\000\025\000\028\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\019\000\000\000\017\000\
    \010\000\009\000\030\000\003\000\011\000\002\000\012\000\006\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\014\000\032\000\007\000\008\000\004\000\013\000\
    \035\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\033\000\034\000\031\000\029\000\005\000\
    \026\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\022\000\017\000\000\000\
    \023\000\000\000\000\000\000\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
    \000\000\000\000\015\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\016\000\000\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\027\000\017\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\019\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\007\000\007\000\014\000\022\000\000\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\019\000\030\000\255\255\
    \019\000\255\255\255\255\255\255\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\255\255\
    \255\255\255\255\015\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\255\255\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\024\000\027\000\017\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\022\000\255\255\023\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 8 "src/lexer.mll"
                         ( token lexbuf )
# 149 "src/lexer.ml"

  | 1 ->
# 9 "src/lexer.mll"
                         ( token lexbuf )
# 154 "src/lexer.ml"

  | 2 ->
# 10 "src/lexer.mll"
                                             ( token lexbuf )
# 159 "src/lexer.ml"

  | 3 ->
# 11 "src/lexer.mll"
                                              ( token lexbuf )
# 164 "src/lexer.ml"

  | 4 ->
let
# 12 "src/lexer.mll"
                    lxm
# 170 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 12 "src/lexer.mll"
                           ( VAL(int_of_string lxm) )
# 174 "src/lexer.ml"

  | 5 ->
let
# 13 "src/lexer.mll"
                                           lxm
# 180 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 13 "src/lexer.mll"
                                                ( STRING(lxm) )
# 184 "src/lexer.ml"

  | 6 ->
let
# 14 "src/lexer.mll"
                                       lxm
# 190 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 14 "src/lexer.mll"
                                            ( match lxm with 
                            | "and" -> AND 
                            | "not" -> NOT 
                            | _ -> RELNAME(lxm) )
# 197 "src/lexer.ml"

  | 7 ->
let
# 18 "src/lexer.mll"
                                       lxm
# 203 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 18 "src/lexer.mll"
                                            ( match lxm with
						    | "AND" -> AND
						    | "NOT" -> NOT
						    | _     -> VARNAME(lxm)
						)
# 211 "src/lexer.ml"

  | 8 ->
# 23 "src/lexer.mll"
                        ( IMPLIEDBY )
# 216 "src/lexer.ml"

  | 9 ->
# 24 "src/lexer.mll"
                          ( QMARK )
# 221 "src/lexer.ml"

  | 10 ->
# 25 "src/lexer.mll"
                           ( QMARK )
# 226 "src/lexer.ml"

  | 11 ->
# 26 "src/lexer.mll"
                                    (UMARK)
# 231 "src/lexer.ml"

  | 12 ->
# 27 "src/lexer.mll"
                         ( DOT )
# 236 "src/lexer.ml"

  | 13 ->
# 28 "src/lexer.mll"
                         ( SEP )
# 241 "src/lexer.ml"

  | 14 ->
# 29 "src/lexer.mll"
                         ( LPAREN )
# 246 "src/lexer.ml"

  | 15 ->
# 30 "src/lexer.mll"
                         ( RPAREN )
# 251 "src/lexer.ml"

  | 16 ->
# 31 "src/lexer.mll"
                         ( EQ )
# 256 "src/lexer.ml"

  | 17 ->
# 32 "src/lexer.mll"
                          ( NE )
# 261 "src/lexer.ml"

  | 18 ->
# 33 "src/lexer.mll"
                         ( EOP )
# 266 "src/lexer.ml"

  | 19 ->
# 34 "src/lexer.mll"
                                                ( ANONVAR )
# 271 "src/lexer.ml"

  | 20 ->
# 35 "src/lexer.mll"
                                                ( LE )
# 276 "src/lexer.ml"

  | 21 ->
# 36 "src/lexer.mll"
                                                ( GE )
# 281 "src/lexer.ml"

  | 22 ->
# 37 "src/lexer.mll"
                                                ( LT )
# 286 "src/lexer.ml"

  | 23 ->
# 38 "src/lexer.mll"
                                                ( GT )
# 291 "src/lexer.ml"

  | 24 ->
# 39 "src/lexer.mll"
                                                ( PLUS )
# 296 "src/lexer.ml"

  | 25 ->
# 40 "src/lexer.mll"
                                                ( MINUS )
# 301 "src/lexer.ml"

  | 26 ->
# 41 "src/lexer.mll"
                  ( EOF )
# 306 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

