% describe the schema of sources and views
%s:tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY).
%v:tracks2(TRACK,RATING,ALBUM,QUANTITY).

% rule for deletion from tracks1
init_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY),
    not tracks2(TRACK,RATING,ALBUM,QUANTITY).

%rule for insertion to tracks1

% after deleting one tuple, we need to insert new one, however, 
%the view tracks2 does not have the column DATE, we need to found a value for this column. 
%One idea is finding it from the old tuples in the source tracks1, 
%we can find it if tracks1 has a primary key, 
%suppose that the key is (TRACK,ALBUM), then we can write a rule as follows:

init_ins_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- tracks2(TRACK,RATING,ALBUM,QUANTITY),
    not tracks1(TRACK,_,RATING,ALBUM,QUANTITY), tracks1(TRACK,DATE,_,ALBUM,_).

% But we need consider the case when we do not find the column DATE in the source tracks1. 
%In this case we can fill the column DATE with a defaul value such as NULL as follows:

init_ins_tracks1(TRACK,0,RATING,ALBUM,QUANTITY) :- tracks2(TRACK,RATING,ALBUM,QUANTITY),
    not tracks1(TRACK,_,_,_,_).

% for FD: ALBUM -> QUANTITY, TRACK -> RATING, DATE

% delete tuples violating ALBUM -> QUANTITY
fd_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY1) :- tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY1), not init_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY1), init_ins_tracks1(_,_,_,ALBUM,QUANTITY2), QUANTITY1 \= QUANTITY2.
% delete tuples violating TRACK -> RATING
fd_del_tracks1(TRACK,DATE,RATING1,ALBUM,QUANTITY) :- tracks1(TRACK,DATE,RATING1,ALBUM,QUANTITY), not init_del_tracks1(TRACK,DATE,RATING1,ALBUM,QUANTITY), init_ins_tracks1(TRACK,_,RATING2,_,_),  RATING1 \= RATING2.
% delete tuples violating TRACK -> DATE
fd_del_tracks1(TRACK,DATE1,RATING,ALBUM,QUANTITY) :- tracks1(TRACK,DATE1,RATING,ALBUM,QUANTITY), not init_del_tracks1(TRACK,DATE1,RATING,ALBUM,QUANTITY), init_ins_tracks1(TRACK,DATE2,_,_,_),  DATE1 \= DATE2.

% recover the deleted tuples in FD checking with new values
% applicable for both ALBUM -> QUANTITY and TRACK -> RATING, DATE
fd_ins_tracks1(TRACK2,DATE2,RATING2,ALBUM3,QUANTITY3) :- fd_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY), init_ins_tracks1(TRACK2,DATE2,RATING2,ALBUM2,QUANTITY2), init_ins_tracks1(TRACK3,DATE3,RATING3,ALBUM3,QUANTITY3), TRACK2 = TRACK, ALBUM3 = ALBUM.
% applicable for only ALBUM -> QUANTITY
fd_ins_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY2) :- fd_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY), init_ins_tracks1(TRACK2,DATE2,RATING2,ALBUM2,QUANTITY2), not init_ins_tracks1(TRACK,_,_,_,_), TRACK \= TRACK2, ALBUM = ALBUM2.
% applicable for only TRACK -> RATING, DATE
fd_ins_tracks1(TRACK2,DATE2,RATING2,ALBUM,QUANTITY) :- fd_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY), init_ins_tracks1(TRACK2,DATE2,RATING2,ALBUM2,QUANTITY2), not init_ins_tracks1(_,_,_,ALBUM,_), TRACK2 = TRACK, ALBUM2 \= ALBUM.

-tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- init_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY).
-tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- fd_del_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY).

+tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- init_ins_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY).
+tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY) :- fd_ins_tracks1(TRACK,DATE,RATING,ALBUM,QUANTITY).
